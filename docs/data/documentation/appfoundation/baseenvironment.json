{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseEnvironment"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/AppFoundation\/documentation\/AppFoundation\/EnvironmentVariable","preciseIdentifier":"s:13AppFoundation19EnvironmentVariableP","text":"EnvironmentVariable"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"TLDR","level":2,"type":"heading","text":"TLDR"},{"type":"codeListing","syntax":null,"code":["if Environment[\"VARIABLE_NAME\"] == true {","   \/\/ Do something.","}"]},{"anchor":"Creating-Variables","level":2,"type":"heading","text":"Creating Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Environment API uses a generic enum. You can create a namespace for your environment variables by declaring a new type."},{"type":"text","text":" "},{"type":"text","text":"You can use any type to satisfy generic, as long as it conforms to "},{"type":"codeVoice","code":"EnvironmentVariable"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To reduce boilerplate, conformance "},{"type":"codeVoice","code":"EnvironentVariable"},{"type":"text","text":" is automatic for "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"It’s also automatic for types that conform to "},{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":", where "},{"type":"codeVoice","code":"RawValue == String"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is particularly convenient for enums:"}]},{"type":"codeListing","syntax":null,"code":["enum MyVariables: String, EnvironmentVarialble {","    case API_KEY","    case USE_DEVELOPED_MODE","    case RETRY_AMOUNT","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, you can aceess your keys like this:"}]},{"type":"codeListing","syntax":null,"code":["if BaseEnvironment<MyVariables>[.USE_DEVELOPER_MODE] == true {","   \/\/ do developer mode stuff","}","","let apiKey: String? = BaseEnvironment<MyVariables>[.API_KEY]?.stringValue"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d recommend defining a "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":" for every type you declare that conforms to "},{"type":"codeVoice","code":"EnvironmentVariable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["typealias MyEnvironment = BaseEnvironment<MyVariable>","","let useDeveloperMode: Bool? = MyEnvironment[.USE_DEVELOPER_MODE]?.boolValue","let apiKey: String? = MyEnvironment[.API_KEY]?.stringValue","let retryAmount: Int? = MyEnvironment[.RETRY_AMOUNT]?.intValue"]},{"anchor":"Using-Strings","level":2,"type":"heading","text":"Using Strings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"String"},{"type":"text","text":" already conforms to "},{"type":"codeVoice","code":"EnvironmentVariable"},{"type":"text","text":", you also don’t to bother with declaring types at all."},{"type":"text","text":" "},{"type":"text","text":"Instead, you can just use "},{"type":"codeVoice","code":"String"},{"type":"text","text":" for all your environment variables."},{"type":"text","text":" "},{"type":"text","text":"You’ll lose type safety though on the variable itself though."}]},{"type":"codeListing","syntax":null,"code":["let value: String? = BaseEnvironment<String>[\"MY_SETTING\"]?.stringValue"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a convenience "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" is already defined as a type alias of "},{"type":"codeVoice","code":"BaseEnvironment<String>"},{"type":"text","text":" "},{"type":"text","text":"As such, the above example could also be written like this:"}]},{"type":"codeListing","syntax":null,"code":["let value: String? = Environment[\"MY_SETTING\"]?.stringValue"]},{"anchor":"Comparisons-and-Literals","level":2,"type":"heading","text":"Comparisons and Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make comparisons easier, All values produced from "},{"type":"codeVoice","code":"BaseEnvironment"},{"type":"text","text":" are expressible by a number of literal types."},{"type":"text","text":" "},{"type":"text","text":"They also all conform to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["if Environment[\"NUM_RETRIES\"] < 5 {","   \/\/ do something","} else if ENVIRONMENT[\"DEVELOPER_MODE\"] == true {","   \/\/ do something else","}",""]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/appfoundation\/baseenvironment"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/AppFoundation\/documentation\/AppFoundation\/BaseEnvironment","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An API to access environment variables via subscripting."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseEnvironment"}],"title":"BaseEnvironment","roleHeading":"Enumeration","role":"symbol","symbolKind":"enum","externalID":"s:13AppFoundation15BaseEnvironmentO","modules":[{"name":"AppFoundation"}],"navigatorTitle":[{"kind":"identifier","text":"BaseEnvironment"}]},"hierarchy":{"paths":[["doc:\/\/AppFoundation\/documentation\/AppFoundation"]]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/AppFoundation\/documentation\/AppFoundation\/BaseEnvironment\/Value"]}],"references":{"doc://AppFoundation/documentation/AppFoundation/BaseEnvironment":{"role":"symbol","title":"BaseEnvironment","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseEnvironment"}],"abstract":[{"type":"text","text":"An API to access environment variables via subscripting."}],"identifier":"doc:\/\/AppFoundation\/documentation\/AppFoundation\/BaseEnvironment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BaseEnvironment"}],"url":"\/documentation\/appfoundation\/baseenvironment"},"doc://AppFoundation/documentation/AppFoundation":{"role":"collection","title":"AppFoundation","abstract":[],"identifier":"doc:\/\/AppFoundation\/documentation\/AppFoundation","kind":"symbol","type":"topic","url":"\/documentation\/appfoundation"},"doc://AppFoundation/documentation/AppFoundation/BaseEnvironment/Value":{"role":"symbol","title":"BaseEnvironment.Value","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"abstract":[{"type":"text","text":"A type used to describe a value bound to an environment variable"}],"identifier":"doc:\/\/AppFoundation\/documentation\/AppFoundation\/BaseEnvironment\/Value","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Value"}],"url":"\/documentation\/appfoundation\/baseenvironment\/value"},"doc://AppFoundation/documentation/AppFoundation/EnvironmentVariable":{"role":"symbol","title":"EnvironmentVariable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentVariable"}],"abstract":[{"type":"text","text":"A protocol describing an environment variable"}],"identifier":"doc:\/\/AppFoundation\/documentation\/AppFoundation\/EnvironmentVariable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentVariable"}],"url":"\/documentation\/appfoundation\/environmentvariable"}}}